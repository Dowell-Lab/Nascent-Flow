/*
 * -------------------------------------------------
 *  NascentFlow Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

// Global default params, used in configs
params {

  version = "1.3" // Pipeline version
  container = 'skptic/nascentflow:latest' // Container slug. Stable releases should specify release tag!
  nf_required_version = '0.30.0' // Minimum version of nextflow required

// Strandedness arguments
  forwardStranded = false
  reverseStranded = false
  unStranded = false

// Input arguments
  reads = "data/*_{1,2}.fastq.gz"
  fastqs = false
  sras = false

// Run arguments
  workdir = false
  clusterOptions = false
  counts = false
  dastk = false
  dreg = false
  flip = false
  flipR2 = false
  fstitch = false
  email = false
  genomeid = 'hg38'
  help = false
  igenomes_base = "./iGenomes"
  nf_required_version = nf_required_version
  noTrim = false
  nqc = false
  outdir = './results'
  prelimtfit = false
  singleEnd = false
  saveAllfq = false
  savefq = false
  saveTrim = false
  saveBAM = false
  skipMultiQC = false
  skipRSeQC = false
  skipFastQC = false
  skippicard = false
  skippreseq = false
  skippileup = false
  skipAllQC = false
  tfit = false
  threadfqdump = false
  version = version
}

profiles {

  standard {
    includeConfig 'conf/base.config'
  }
  conda { process.conda = "$baseDir/environment.yml" }
  docker { docker.enabled = true }
  singularity { singularity.enabled = true }
  aws {
    includeConfig 'conf/base.config'
    includeConfig 'conf/aws.config'
    includeConfig 'conf/igenomes.config'
  }
  test {
    includeConfig 'conf/base.config'
    includeConfig 'conf/test.config'
  }
  paper {
    includeConfig 'conf/base.config'
    includeConfig 'conf/paper.config'
  }
  batch {
    workDir = 's3://cbcrg-eu/work'
    process.executor = 'awsbatch'
    process.queue = 'demo'
    executor.awscli = '/home/ec2-user/miniconda/bin/aws'
    aws.region = 'eu-west-1'
  }
  slurm {
    workDir = params.workdir
    process.executor = 'slurm'
    process.queue = 'short'
    includeConfig 'conf/base.config'
    includeConfig 'conf/slurm.config'
  }
  slurm_grch38 {
    workDir = params.workdir
    process.executor = 'slurm'
    process.queue = 'short'
    includeConfig 'conf/base.config'
    includeConfig 'conf/slurm_grch38.config'
  }
  hg38 {
    workDir = params.workdir
    process.executor = 'slurm'
    process.queue = 'short'
    includeConfig 'conf/base.config'
    includeConfig 'conf/hg38.config'
  }
  mm10 {
    workDir = params.workdir
    process.executor = 'slurm'
    process.queue = 'short'
    includeConfig 'conf/base.config'
    includeConfig 'conf/mm10.config'
  }
  rn6 {
    workDir = params.workdir
    process.executor = 'slurm'
    process.queue = 'short'
    includeConfig 'conf/base.config'
    includeConfig 'conf/rn6.config'
  }
  rheMac8 {
    workDir = params.workdir
    process.executor = 'slurm'
    process.queue = 'short'
    includeConfig 'conf/base.config'
    includeConfig 'conf/rheMac8.config'
  }
  panTro6 {
    workDir = params.workdir
    process.executor = 'slurm'
    process.queue = 'short'
    includeConfig 'conf/base.config'
    includeConfig 'conf/panTro6.config'
  }
  AGPv4 {
    workDir = params.workdir
    process.executor = 'slurm'
    process.queue = 'short'
    includeConfig 'conf/base.config'
    includeConfig 'conf/AGPv4.config'
  }
  ce10 {
    workDir = params.workdir
    process.executor = 'slurm'
    process.queue = 'short'
    includeConfig 'conf/base.config'
    includeConfig 'conf/ce10.config'
  }
  dm6 {
    workDir = params.workdir
    process.executor = 'slurm'
    process.queue = 'short'
    includeConfig 'conf/base.config'
    includeConfig 'conf/dm6.config'
  }
  EB1 {
    workDir = params.workdir
    process.executor = 'slurm'
    process.queue = 'short'
    includeConfig 'conf/base.config'
    includeConfig 'conf/EB1.config'
  }
  EF2 {
    workDir = params.workdir
    process.executor = 'slurm'
    process.queue = 'short'
    includeConfig 'conf/base.config'
    includeConfig 'conf/EF2.config'
  }
  saCer3 {
    workDir = params.workdir
    process.executor = 'slurm'
    process.queue = 'short'
    includeConfig 'conf/base.config'
    includeConfig 'conf/saCer3.config'
  }
  R64_1_1 {
    workDir = params.workdir
    process.executor = 'slurm'
    process.queue = 'short'
    includeConfig 'conf/base.config'
    includeConfig 'conf/R64_1_1.config'
  }
  TAIR10 {
    workDir = params.workdir
    process.executor = 'slurm'
    process.queue = 'short'
    includeConfig 'conf/base.config'
    includeConfig 'conf/TAIR10.config'
  }
  MEv6 {
    workDir = params.workdir
    process.executor = 'slurm'
    process.queue = 'short'
    includeConfig 'conf/base.config'
    includeConfig 'conf/MEv6.config'
  }
  equCab3 {
    workDir = params.workdir
    process.executor = 'slurm'
    process.queue = 'short'
    includeConfig 'conf/base.config'
    includeConfig 'conf/equCab3.config'
  }
  canFam4 {
    workDir = params.workdir
    process.executor = 'slurm'
    process.queue = 'short'
    includeConfig 'conf/base.config'
    includeConfig 'conf/canFam4.config'
  }
  susScr11 {
    workDir = params.workdir
    process.executor = 'slurm'
    process.queue = 'short'
    includeConfig 'conf/base.config'
    includeConfig 'conf/susScr11.config'
  }
  myoLuc2 {
    workDir = params.workdir
    process.executor = 'slurm'
    process.queue = 'short'
    includeConfig 'conf/base.config'
    includeConfig 'conf/myoLuc2.config'
  }
  criGriChoV2 {
    workDir = params.workdir
    process.executor = 'slurm'
    process.queue = 'short'
    includeConfig 'conf/base.config'
    includeConfig 'conf/criGriChoV2.config'
  }
  Pfalci {
    workDir = params.workdir
    process.executor = 'slurm'
    process.queue = 'short'
    includeConfig 'conf/base.config'
    includeConfig 'conf/Pfalci.config'
  }
  Ttherm {
    workDir = params.workdir
    process.executor = 'slurm'
    process.queue = 'short'
    includeConfig 'conf/base.config'
    includeConfig 'conf/Ttherm.config'
  }
  minimal {
    process.executor = 'slurm'
    process.queue = 'short'
    includeConfig 'conf/base.config'
    includeConfig 'conf/minimal.config'
  }
  none {
    // Don't load any config (for use with custom home configs)
  }

}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
    file = "${params.outdir}/pipeline_info/nascent_pipeline_timeline.html"
}
report {
  enabled = true
  file = "${params.outdir}/pipeline_info/nascent_pipeline_report.html"
}
trace {
  enabled = true
  file = "${params.outdir}/pipeline_info/nascent_pipeline_trace.txt"
}
dag {
  enabled = true
  file = "${params.outdir}/pipeline_info/nascent_pipeline_dag.svg"
}

manifest {
  homePage = 'https://github.com/Dowell-Lab/NascentFlow'
  description = 'This pipeline processes nascent transcription datasets using Nextflow'
  mainScript = 'main.nf'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
